name: prebuilt-ld

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Create GitHub Release'
        required: false
        type: boolean
  push:
    branches:
      - 'master'

env:
  DIST: ./bin

jobs:
  targets:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.targets.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Create matrix
        id: targets
        run: |
          matrix=$(echo "$(docker buildx bake ld-static-tgz --print | jq -cr '.group."ld-static-tgz".targets') $(docker buildx bake ld64-tgz --print | jq -cr '.group."ld64-tgz".targets')" | jq -cs add)
          echo "matrix=${matrix}" >> ${GITHUB_OUTPUT}
      -
        name: Show matrix
        run: |
          echo ${{ steps.targets.outputs.matrix }}

  build:
    runs-on: ubuntu-latest
    needs:
      - targets
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.targets.outputs.matrix) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build
        uses: docker/bake-action@v2
        with:
          targets: ${{ matrix.target }}
          set: |
            *.output=${{ env.DIST }}
      -
        name: Move artifacts
        run: |
          mv ${{ env.DIST }}/**/* ${{ env.DIST }}/ || true
      -
        name: Upload artifacts
        if: ${{ inputs.release }}
        uses: actions/upload-artifact@v3
        with:
          name: prebuilt-ld
          path: ${{ env.DIST }}/*
          if-no-files-found: error
          retention-days: 5

  release:
    runs-on: ubuntu-latest
    if: ${{ inputs.release }}
    needs:
      - build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Prepare
        run: |
          version=$(docker buildx bake ld-linux-arm64-tgz --print | jq -cr '.target."ld-linux-arm64-tgz".args."BINUTILS_VERSION"')
          echo "VERSION=${version}" >> $GITHUB_ENV
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prebuilt-ld
          path: ./bin
      -
        name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: prebuilt/ld-${{ env.VERSION }}-${{ github.run_number }}
          tag_name: prebuilt/ld-${{ env.VERSION }}-${{ github.run_number }}
          files: ${{ env.DIST }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Generate base/xx-ld-shas
        run: |
          bash ./hack/generate-ld-shas
      -
        name: Commit changes
        run: |
          git add -A .
      -
        name: Create PR
        uses: peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04
        with:
          base: master
          branch: bot/prebuilt-ld
          commit-message: "update base/xx-ld-shas"
          signoff: true
          delete-branch: true
          title: "Update `base/xx-ld-shas`"
          draft: false
