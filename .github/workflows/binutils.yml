name: binutils

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Registry repo'
        required: true
        default: 'tonistiigi/xx'
        type: string
      release:
        description: 'Push image and create GitHub Release'
        required: false
        type: boolean
  push:
    branches:
      - 'master'

jobs:
  targets:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.targets.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Create matrix
        id: targets
        run: |
          matrix=$(docker buildx bake binutils --print | jq -cr '.group.binutils.targets')
          echo "matrix=${matrix}" >> ${GITHUB_OUTPUT}
      -
        name: Show matrix
        run: |
          echo ${{ steps.targets.outputs.matrix }}

  build:
    runs-on: ubuntu-latest
    needs:
      - targets
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.targets.outputs.matrix) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        if: ${{ inputs.release }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build
        uses: docker/bake-action@v2
        with:
          targets: ${{ matrix.target }}
          push: ${{ inputs.release }}
        env:
          XX_REPO: ${{ inputs.repo }}

  ghrelease:
    runs-on: ubuntu-latest
    if: ${{ inputs.release }}
    needs:
      - build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Prepare
        run: |
          version=$(docker buildx bake binutils-linux-arm64-alpine --print | jq -cr '.target."binutils-linux-arm64-alpine".args."BINUTILS_VERSION"')
          echo "VERSION=${version}" >> $GITHUB_ENV
      -
        # TODO: Create release notes with list of image tags pushed
        name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: binutils/${{ env.VERSION }}-${{ github.run_number }}
          tag_name: binutils/${{ env.VERSION }}-${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
